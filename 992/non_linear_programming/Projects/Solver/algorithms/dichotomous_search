{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**********************\n",
      "('[b,a]', '|b[k]-a[k]|')\n",
      "**********************\n",
      "((1, 0), 1)\n",
      "((1, 0.4), 0.6)\n",
      "((1, 0.6), 0.4)\n",
      "((1, 0.7000000000000001), 0.29999999999999993)\n",
      "((1, 0.7500000000000001), 0.2499999999999999)\n",
      "((1, 0.775), 0.22499999999999998)\n",
      "((1, 0.7875), 0.21250000000000002)\n",
      "((1, 0.7937500000000001), 0.20624999999999993)\n",
      "((1, 0.7968750000000001), 0.2031249999999999)\n",
      "((1, 0.7984375), 0.20156249999999998)\n",
      "((1, 0.79921875), 0.20078125000000002)\n",
      "((1, 0.7996093750000001), 0.20039062499999993)\n",
      "((1, 0.7998046875000001), 0.2001953124999999)\n",
      "((1, 0.79990234375), 0.20009765624999998)\n",
      "((1, 0.799951171875), 0.20004882812500002)\n",
      "((1, 0.7999755859375001), 0.20002441406249993)\n",
      "((1, 0.7999877929687501), 0.2000122070312499)\n",
      "((1, 0.799993896484375), 0.20000610351562498)\n",
      "((1, 0.7999969482421875), 0.20000305175781252)\n",
      "((1, 0.7999984741210938), 0.20000152587890618)\n",
      "((1, 0.799999237060547), 0.20000076293945301)\n",
      "((1, 0.7999996185302735), 0.20000038146972654)\n",
      "((1, 0.7999998092651367), 0.2000001907348633)\n",
      "((1, 0.7999999046325684), 0.20000009536743157)\n",
      "((1, 0.7999999523162843), 0.2000000476837157)\n",
      "((1, 0.7999999761581421), 0.2000000238418579)\n",
      "((1, 0.799999988079071), 0.20000001192092898)\n",
      "((1, 0.7999999940395356), 0.2000000059604644)\n",
      "((1, 0.7999999970197679), 0.20000000298023213)\n",
      "((1, 0.7999999985098839), 0.2000000014901161)\n",
      "((1, 0.7999999992549419), 0.20000000074505808)\n",
      "((1, 0.799999999627471), 0.20000000037252896)\n",
      "((1, 0.7999999998137356), 0.2000000001862644)\n",
      "((1, 0.7999999999068678), 0.20000000009313224)\n",
      "((1, 0.7999999999534338), 0.20000000004656615)\n",
      "((1, 0.799999999976717), 0.200000000023283)\n",
      "((1, 0.7999999999883586), 0.20000000001164142)\n",
      "((1, 0.7999999999941793), 0.20000000000582074)\n",
      "((1, 0.7999999999970896), 0.2000000000029104)\n",
      "((1, 0.7999999999985449), 0.20000000000145512)\n",
      "((1, 0.7999999999992725), 0.20000000000072748)\n",
      "((1, 0.7999999999996362), 0.20000000000036378)\n",
      "((1, 0.7999999999998181), 0.20000000000018192)\n",
      "((1, 0.7999999999999091), 0.20000000000009088)\n",
      "((1, 0.7999999999999546), 0.20000000000004536)\n",
      "((1, 0.7999999999999773), 0.20000000000002272)\n",
      "((1, 0.7999999999999886), 0.2000000000000114)\n",
      "((1, 0.7999999999999944), 0.20000000000000562)\n",
      "((1, 0.7999999999999973), 0.20000000000000273)\n",
      "((1, 0.7999999999999986), 0.2000000000000014)\n",
      "((1, 0.7999999999999993), 0.20000000000000073)\n",
      "((1, 0.7999999999999997), 0.2000000000000003)\n",
      "((1, 0.7999999999999999), 0.20000000000000007)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.7999999999999999, 1)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from __future__ import division\n",
    "\n",
    "f = lambda x: x**2 - 10*x\n",
    "\n",
    "def dichotomous_search(a0,b0,eps, verbose=False):\n",
    "    k=0\n",
    "    lam=list()\n",
    "    mu=list()\n",
    "    a=list()\n",
    "    a.append(a0)\n",
    "    b=list()\n",
    "    b.append(b0)\n",
    "    dist=list()\n",
    "    \n",
    "    if verbose:\n",
    "        print(\"************************\")\n",
    "        print((\"[b,a]\"), \"|b[k]-a[k]|\")\n",
    "        print(\"************************\")\n",
    "        \n",
    "    while True:\n",
    "        if abs(b[k]-a[k])<=eps:\n",
    "            break\n",
    "        \n",
    "        if verbose:\n",
    "            print((b[k], a[k]), abs(b[k]-a[k]))\n",
    "        lam.append(((a[k]+b[k])/2) - eps)\n",
    "        mu.append(((a[k]+b[k])/2) + eps)\n",
    "        \n",
    "        if(f(lam[k]) < f(mu[k])):\n",
    "            a.append(a[k])\n",
    "            b.append(mu[k])\n",
    "        else:\n",
    "            a.append(lam[k])\n",
    "            b.append(b[k])\n",
    "        k+=1\n",
    "\n",
    "        if(abs(b[k]-a[k]) == abs(b[k-1]-a[k-1])):\n",
    "            break\n",
    "\n",
    "    return (a[-1],b[-1])\n",
    "dichotomous_search(0,1,0.1, verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
